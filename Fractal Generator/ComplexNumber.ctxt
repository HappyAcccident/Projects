#BlueJ class context
comment0.target=ComplexNumber
comment0.text=\n\ <code>ComplexNumber</code>\ is\ a\ class\ which\ implements\ complex\ numbers\ in\ Java.\ \n\ It\ includes\ basic\ operations\ that\ can\ be\ performed\ on\ complex\ numbers\ such\ as,\n\ addition,\ subtraction,\ multiplication,\ conjugate,\ modulus\ and\ squaring.\ \n\ The\ data\ type\ for\ Complex\ Numbers.\n\ <br\ /><br\ />\n\ The\ features\ of\ this\ library\ include\:<br\ />\n\ <ul>\n\ <li>Arithmetic\ Operations\ (addition,\ subtraction,\ multiplication,\ division)</li>\n\ <li>Complex\ Specific\ Operations\ -\ Conjugate,\ Inverse,\ Absolute/Magnitude,\ Argument/Phase</li>\n\ <li>Trigonometric\ Operations\ -\ sin,\ cos,\ tan,\ cot,\ sec,\ cosec</li>\n\ <li>Mathematical\ Functions\ -\ exp</li>\n\ <li>Complex\ Parsing\ of\ type\ x+yi</li>\n\ </ul>\n\ \n\ @author\ \ \ \ \ \ Abdul\ Fatir\n\ @version\ \ \ \ \ 1.1\n\ \n
comment1.params=
comment1.target=ComplexNumber()
comment1.text=\n\ Constructs\ a\ new\ <code>ComplexNumber</code>\ object\ with\ both\ real\ and\ imaginary\ parts\ 0\ (z\ \=\ 0\ +\ 0i).\n
comment10.params=z1\ z2
comment10.target=ComplexNumber\ multiply(ComplexNumber,\ ComplexNumber)
comment10.text=\n\ Multiplies\ one\ <code>ComplexNumber</code>\ to\ another.\n\ @param\ z1\ the\ first\ <code>ComplexNumber</code>.\n\ @param\ z2\ the\ second\ <code>ComplexNumber</code>.\n\ @return\ the\ resultant\ <code>ComplexNumber</code>\ (z1\ *\ z2).\n
comment11.params=z1\ z2
comment11.target=ComplexNumber\ divide(ComplexNumber,\ ComplexNumber)
comment11.text=\n\ Divides\ one\ <code>ComplexNumber</code>\ by\ another.\n\ @param\ z1\ the\ first\ <code>ComplexNumber</code>.\n\ @param\ z2\ the\ second\ <code>ComplexNumber</code>.\n\ @return\ the\ resultant\ <code>ComplexNumber</code>\ (z1\ /\ z2).\n
comment12.params=
comment12.target=ComplexNumber\ conjugate()
comment12.text=\n\ The\ complex\ conjugate\ of\ the\ current\ complex\ number.\n\ @return\ a\ <code>ComplexNumber</code>\ object\ which\ is\ the\ conjugate\ of\ the\ current\ complex\ number\n
comment13.params=
comment13.target=double\ mod()
comment13.text=\n\ The\ modulus,\ magnitude\ or\ the\ absolute\ value\ of\ current\ complex\ number.\n\ @return\ the\ magnitude\ or\ modulus\ of\ current\ complex\ number\n
comment14.params=
comment14.target=ComplexNumber\ square()
comment14.text=\n\ The\ square\ of\ the\ current\ complex\ number.\n\ @return\ a\ <code>ComplexNumber</code>\ which\ is\ the\ square\ of\ the\ current\ complex\ number.\n
comment15.params=
comment15.target=java.lang.String\ toString()
comment15.text=\n\ @return\ the\ complex\ number\ in\ x\ +\ yi\ format\n
comment16.params=z
comment16.target=ComplexNumber\ exp(ComplexNumber)
comment16.text=\n\ Calculates\ the\ exponential\ of\ the\ <code>ComplexNumber</code>\n\ @param\ z\ The\ input\ complex\ number\n\ @return\ a\ <code>ComplexNumber</code>\ which\ is\ e^(input\ z)\n
comment17.params=z\ power
comment17.target=ComplexNumber\ pow(ComplexNumber,\ int)
comment17.text=\n\ Calculates\ the\ <code>ComplexNumber</code>\ to\ the\ passed\ integer\ power.\n\ @param\ z\ The\ input\ complex\ number\n\ @param\ power\ The\ power.\n\ @return\ a\ <code>ComplexNumber</code>\ which\ is\ (z)^power\n
comment18.params=z
comment18.target=ComplexNumber\ sin(ComplexNumber)
comment18.text=\n\ Calculates\ the\ sine\ of\ the\ <code>ComplexNumber</code>\n\ @param\ z\ the\ input\ complex\ number\n\ @return\ a\ <code>ComplexNumber</code>\ which\ is\ the\ sine\ of\ z.\n
comment19.params=z
comment19.target=ComplexNumber\ cos(ComplexNumber)
comment19.text=\n\ Calculates\ the\ cosine\ of\ the\ <code>ComplexNumber</code>\n\ @param\ z\ the\ input\ complex\ number\n\ @return\ a\ <code>ComplexNumber</code>\ which\ is\ the\ cosine\ of\ z.\n
comment2.params=real\ imaginary
comment2.target=ComplexNumber(double,\ double)
comment2.text=\n\ Constructs\ a\ new\ <code>ComplexNumber</code>\ object.\n\ @param\ real\ the\ real\ part,\ Re(z),\ of\ the\ complex\ number\n\ @param\ imaginary\ the\ imaginary\ part,\ Im(z),\ of\ the\ complex\ number\n
comment20.params=z
comment20.target=ComplexNumber\ tan(ComplexNumber)
comment20.text=\n\ Calculates\ the\ tangent\ of\ the\ <code>ComplexNumber</code>\n\ @param\ z\ the\ input\ complex\ number\n\ @return\ a\ <code>ComplexNumber</code>\ which\ is\ the\ tangent\ of\ z.\n
comment21.params=z
comment21.target=ComplexNumber\ cot(ComplexNumber)
comment21.text=\n\ Calculates\ the\ co-tangent\ of\ the\ <code>ComplexNumber</code>\n\ @param\ z\ the\ input\ complex\ number\n\ @return\ a\ <code>ComplexNumber</code>\ which\ is\ the\ co-tangent\ of\ z.\n
comment22.params=z
comment22.target=ComplexNumber\ sec(ComplexNumber)
comment22.text=\n\ Calculates\ the\ secant\ of\ the\ <code>ComplexNumber</code>\n\ @param\ z\ the\ input\ complex\ number\n\ @return\ a\ <code>ComplexNumber</code>\ which\ is\ the\ secant\ of\ z.\n
comment23.params=z
comment23.target=ComplexNumber\ cosec(ComplexNumber)
comment23.text=\n\ Calculates\ the\ co-secant\ of\ the\ <code>ComplexNumber</code>\n\ @param\ z\ the\ input\ complex\ number\n\ @return\ a\ <code>ComplexNumber</code>\ which\ is\ the\ co-secant\ of\ z.\n
comment24.params=
comment24.target=double\ getRe()
comment24.text=\n\ The\ real\ part\ of\ <code>ComplexNumber</code>\n\ @return\ the\ real\ part\ of\ the\ complex\ number\n
comment25.params=
comment25.target=double\ getIm()
comment25.text=\n\ The\ imaginary\ part\ of\ <code>ComplexNumber</code>\n\ @return\ the\ imaginary\ part\ of\ the\ complex\ number\n
comment26.params=
comment26.target=double\ getArg()
comment26.text=\n\ The\ argument/phase\ of\ the\ current\ complex\ number.\n\ @return\ arg(z)\ -\ the\ argument\ of\ current\ complex\ number\n
comment27.params=s
comment27.target=ComplexNumber\ parseComplex(java.lang.String)
comment27.text=\n\ Parses\ the\ <code>String</code>\ as\ a\ <code>ComplexNumber</code>\ of\ type\ x+yi.\n\ @param\ s\ the\ input\ complex\ number\ as\ string\n\ @return\ a\ <code>ComplexNumber</code>\ which\ is\ represented\ by\ the\ string.\n
comment28.params=z
comment28.target=boolean\ equals(java.lang.Object)
comment28.text=\n\ Checks\ if\ the\ passed\ <code>ComplexNumber</code>\ is\ equal\ to\ the\ current.\n\ @param\ z\ the\ complex\ number\ to\ be\ checked\n\ @return\ true\ if\ they\ are\ equal,\ false\ otherwise\n
comment29.params=
comment29.target=ComplexNumber\ inverse()
comment29.text=\n\ The\ inverse/reciprocal\ of\ the\ complex\ number.\n\ @return\ the\ reciprocal\ of\ current\ complex\ number.\n
comment3.params=z
comment3.target=ComplexNumber\ add(ComplexNumber)
comment3.text=\n\ Adds\ another\ <code>ComplexNumber</code>\ to\ the\ current\ complex\ number.\n\ @param\ z\ the\ complex\ number\ to\ be\ added\ to\ the\ current\ complex\ number\n
comment30.params=format_id
comment30.target=java.lang.String\ format(int)
comment30.text=\n\ Formats\ the\ Complex\ number\ as\ x+yi\ or\ r.cis(theta)\n\ @param\ format_id\ the\ format\ ID\ <code>ComplexNumber.XY</code>\ or\ <code>ComplexNumber.RCIS</code>.\n\ @return\ a\ string\ representation\ of\ the\ complex\ number\n\ @throws\ IllegalArgumentException\ if\ the\ format_id\ does\ not\ match.\n
comment4.params=z
comment4.target=void\ subtract(ComplexNumber)
comment4.text=\n\ Subtracts\ another\ <code>ComplexNumber</code>\ from\ the\ current\ complex\ number.\n\ @param\ z\ the\ complex\ number\ to\ be\ subtracted\ from\ the\ current\ complex\ number\n
comment5.params=z
comment5.target=void\ multiply(ComplexNumber)
comment5.text=\n\ Multiplies\ another\ <code>ComplexNumber</code>\ to\ the\ current\ complex\ number.\n\ @param\ z\ the\ complex\ number\ to\ be\ multiplied\ to\ the\ current\ complex\ number\n
comment6.params=z
comment6.target=void\ divide(ComplexNumber)
comment6.text=\n\ Divides\ the\ current\ <code>ComplexNumber</code>\ by\ another\ <code>ComplexNumber</code>.\n\ @param\ z\ the\ divisor\n
comment7.params=z
comment7.target=void\ set(ComplexNumber)
comment7.text=\n\ Sets\ the\ value\ of\ current\ complex\ number\ to\ the\ passed\ complex\ number.\n\ @param\ z\ the\ complex\ number\n
comment8.params=z1\ z2
comment8.target=ComplexNumber\ add(ComplexNumber,\ ComplexNumber)
comment8.text=\n\ Adds\ two\ <code>ComplexNumber</code>.\n\ @param\ z1\ the\ first\ <code>ComplexNumber</code>.\n\ @param\ z2\ the\ second\ <code>ComplexNumber</code>.\n\ @return\ the\ resultant\ <code>ComplexNumber</code>\ (z1\ +\ z2).\n
comment9.params=z1\ z2
comment9.target=ComplexNumber\ subtract(ComplexNumber,\ ComplexNumber)
comment9.text=\n\ Subtracts\ one\ <code>ComplexNumber</code>\ from\ another.\n\ @param\ z1\ the\ first\ <code>ComplexNumber</code>.\n\ @param\ z2\ the\ second\ <code>ComplexNumber</code>.\n\ @return\ the\ resultant\ <code>ComplexNumber</code>\ (z1\ -\ z2).\n
numComments=31
